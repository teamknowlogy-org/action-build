name: 'BuildApp'
description: 'Get all the paraters by Name of the repository'
inputs:
  PROJECT_NAME: 
    description: 'Name of the Project  to build the app '
    required: false
    default: 'squint'
    options:
      - squint
  APPLICATION_BRANCH_NAME: 
    description: 'Name of the Environment to build the app'
    required: false
    default: 'develop'    
  APPLICATION_NAME: 
    description: 'Name of the Application/Repository  to build the app'
    required: false
    default: 'squint-front' 
  APPLICATION_TYPE: 
    description: 'Type of the Application/Repository  to build the app'
    required: true
    options:
      - NODE
      - REACT
      - PYTHON  
  DEPLOY_TYPE: 
    description: 'Type of the Application/Repository  to build the deploy (LAMBDA/ECS/S3)'
    required: false
    options:
      - LAMBDA
      - S3
      - ECS  
  NODE_VERSION: 
    description: 'Version of Node to build app'
    required: false
  SERVICE_NAME: 
    description: 'Name of the AWS SERVICE to refresh'
    required: false   
runs:
  using: "composite"
  steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Checkout the repository to the runner
      uses: teamknowlogy-org/action-get-credentials@main
      with:
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        APPLICATION_NAME: ${{ inputs.APPLICATION_NAME }}
      
    - name: Use Node.js
      if: inputs.APPLICATION_TYPE == 'NODE'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.NODE_VERSION }}

    - name: Instalar dependencias
      if: inputs.APPLICATION_TYPE == 'NODE'
      run: npm install
      shell: bash
      
    - name: build 
      if: inputs.APPLICATION_TYPE == 'NODE'   
      run: npm run build:ssm
      shell: bash

    - name: Empaquetar función
      if: inputs.DEPLOY_TYPE == 'LAMBDA'   
      run: zip -r lambda_function.zip ./* -x "*.zip"
      shell: bash

    - name: Desplegar función en AWS Lambda
      if: inputs.DEPLOY_TYPE == 'LAMBDA'   
      run: |
        aws lambda update-function-code \
          --function-name ${{ inputs.SERVICE_NAME }} \
          --zip-file fileb://lambda_function.zip
      shell: bash



###### Front steps  ######
#
#    - name: Build and package application
#      if: inputs.APPLICATION_TYPE == 'front'
#      run: |
#        npm run build:${{inputs.APP_BRANCH_NAME}}
#      shell: bash
#
#    - name: Deploy to S3
#      if: inputs.APPLICATION_TYPE == 'front'
#      run: |
#        cd output/dist
#        aws s3 sync . s3://$( aws ssm get-parameter --region us-east-1 --name /${{inputs.PROJECT_NAME}}/${{inputs.APP_BRANCH_NAME}}/service/${{inputs.APPLICATION_NAME}}/S3_BUCKET_NAME  --query "Parameter.Value" --output text) --delete
#        ls -lrt
#      shell: bash
#
#    - name: Invalidate CloudFront cache
#      if: inputs.APPLICATION_TYPE == 'front'
#      run: |
#        aws cloudfront create-invalidation --distribution-id $( aws ssm get-parameter --region us-east-1 --name /${{inputs.PROJECT_NAME}}/${{inputs.APP_BRANCH_NAME}}/service/${{inputs.APPLICATION_NAME}}/CLOUDFRONT_ID  --query "Parameter.Value" --output text) --paths "/*"
#      shell: bash
#
####### ECS steps  ######

    - name: Login en el registro de contenedores de AWS
      if: inputs.APPLICATION_TYPE == 'ECS'
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
      shell: bash
      
    - name: Construir y etiquetar imagen Docker
      if: inputs.APPLICATION_TYPE == 'ECS'
      run: |
        docker build -t ${{ inputs.SERVICE_NAME }} .
        docker tag ${{inputs.SERVICE_NAME}}:latest ${{ env.ECR_REPOSITORY }}/${{ inputs.SERVICE_NAME }}:latest
      shell: bash
      
#    - name: Publicar imagen Docker en AWS ECR
#      if: inputs.APPLICATION_TYPE == 'ecs'
#      run: |
#        docker push ${{ env.ECR_REPOSITORY }}/${{ inputs.SERVICE_NAME }}:latest
#      shell: bash
    
#    - name: Actualizar servicio en AWS ECS
#      if: inputs.APPLICATION_TYPE == 'ecs'
#      run: |
#        aws ecs update-service --cluster ${{ inputs.SERVICE_NAME }}-cluster --service ${{ inputs.SERVICE_NAME }}-ecs-service --force-new-deployment
#      shell: bash
