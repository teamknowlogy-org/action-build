name: 'BuildApp'
description: 'Get all the paraters by Name of the repository'
runs:
  using: "composite"
  steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Checkout the repository to the runner
      uses: teamknowlogy-org/action-get-credentials@main
      with:
        PROJECT_NAME: ${{ env.PROJECT_NAME }}
        APPLICATION_NAME: ${{ env.APPLICATION_NAME }}
      
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

###### LAMBDA DEPLOY  ######
    - name: Set CLuster Env
      if: env.DEPLOY_TYPE == 'LAMBDA'
      run: |
          echo S3_BUCKET_NAME_LAMBDA="squint-dev-lambda-deploy" >> "$GITHUB_ENV"   
      shell: bash
      
    - name: Instalar dependencias
      if: env.DEPLOY_TYPE == 'LAMBDA'
      run: npm install ${{ env.PROD_FLAG }}
      shell: bash
      
    - name: build 
      if: env.DEPLOY_TYPE == 'LAMBDA'   
      run: npm run build:ssm 
      shell: bash

    - name: Empaquetar función
      if: env.DEPLOY_TYPE == 'LAMBDA'   
      run: zip -r lambda_function.zip ./* -x "*.zip"
      shell: bash
      
    - name: Empaquetar función
      if: env.DEPLOY_TYPE == 'LAMBDA'   
      run: aws s3 cp "lambda_function.zip" "s3://${{ env.S3_BUCKET_NAME_LAMBDA }}/${{ env.APPLICATION_NAME }}/lambda_function.zip"
      shell: bash

    - name: Desplegar función en AWS Lambda
      if: env.DEPLOY_TYPE == 'LAMBDA'   
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.APPLICATION_NAME }} \
          --s3-bucket ${{ env.S3_BUCKET_NAME_LAMBDA }} \
          --s3-key ${{ env.APPLICATION_NAME }}/lambda_function.zip \
          --region ${{ env.AWS_REGION }}
      shell: bash

    - name: Empaquetar función
      if: env.DEPLOY_TYPE == 'LAMBDA'   
      run: aws s3 rm "s3://${{ env.S3_BUCKET_NAME_LAMBDA }}/${{ env.APPLICATION_NAME }}lambda_function.zip"
      shell: bash

###### CLOUDFRONT DEPLOY  ######
    - name: Set CLuster Env
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
          echo BUCKET_NAME="${{ env.APPLICATION_NAME }}-dev" >> "$GITHUB_ENV"   
      shell: bash
      
    - name: Set CLuster Env
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
          echo CLOUDFRONT_DISTRIBUTION="$(aws cloudfront list-distributions --query 'DistributionList.Items[?Origins.Items[?Id==`'${{ env.BUCKET_NAME }}'`]].{Id:Id}' --output text)" >> "$GITHUB_ENV"   
      shell: bash
    
    - name: Set CLOUDFRONT_DISTRIBUTION Env      
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
          echo "My Cloudfront distribution is: ${{ env.CLOUDFRONT_DISTRIBUTION }}"
      shell: bash
                
    - name: Build and package application
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
        npm install
      shell: bash
      
    - name: Build and package application
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
        npm run build:develop
      shell: bash

    - name: Deploy to S3
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
        cd output/dist
        aws s3 sync . s3://${{ env.BUCKET_NAME }} --delete
        ls -lrt
      shell: bash

    - name: Invalidate CloudFront cache
      if: env.DEPLOY_TYPE == 'CLOUDFRONT'
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/*"
      shell: bash

####### ECS steps  ######

    - name: Set CLuster Env
      if: env.DEPLOY_TYPE == 'ECS'
      run: |
        if [[ -z "$CLUSTER_NAME" ]]; then
          echo "Name Cluster Name  is empty"
          echo CLUSTER_NAME=$(echo $SERVICE_NAME) >> "$GITHUB_ENV"   
        else
          echo "Name variable is not empty"
          echo "USING $CLUSTER_NAME"
        fi
      shell: bash
        
    - name: Instalar dependencias
      if: env.DEPLOY_TYPE == 'ECS'
      run: |
        npm install
      shell: bash

    - name: Hacer build de la aplicación
      if: env.DEPLOY_TYPE == 'ECS'
      run: |
        npm run build
      shell: bash
          
    - name: Login en el registro de contenedores de AWS
      if: env.DEPLOY_TYPE == 'ECS'
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
      shell: bash
      
    - name: Construir y etiquetar imagen Docker
      if:  env.DEPLOY_TYPE == 'ECS'
      run: |
        docker build -t ${{ env.CLUSTER_NAME }} .
        docker tag ${{ env.CLUSTER_NAME }}:latest ${{ env.ECR_REPOSITORY }}/${{ env.APPLICATION_NAME }}:latest
      shell: bash
      
    - name: Publicar imagen Docker en AWS ECR
      if:  env.DEPLOY_TYPE == 'ECS'
      run: |
        docker push ${{ env.ECR_REPOSITORY }}/${{ env.APPLICATION_NAME }}:latest
      shell: bash
   

    - name: Actualizar servicio en AWS ECS
      if:  env.DEPLOY_TYPE == 'ECS'
      run: |
        aws ecs update-service --cluster squint-squint_ecs_cluster-cluster --service ${{ env.APPLICATION_NAME }}-ecs-service --force-new-deployment
      shell: bash
